@using BookCatalog.Shared.DTOs;
@using BookCatalog.Blazor.Model;
@using BookCatalog.Blazor.Components;

@page "/book/{Id:int}"
<PageTitle>Book Details</PageTitle>

@inject BookCatalogModel Model;

@if(!(book is null)){
    <div class="container">
        <div class="row">
            <h2 class="col-3">Book Details</h2>
            <div class="idTag col-2">(#@book.Id)</div>
        </div>
    </div><hr/>

    <div class="container infoTop">
        <div class="row">
            <div class="col-2">Title: </div>
            <div class="col-6">@book.Name</div>
        </div>
        <div class="row">
            <div class="col-2">Author: </div>
            <div class="col-6">@book.Author.Name</div>
        </div>
        <div class="row">
            <div class="col-2">Genre: </div>
            <div class="col-6">@book.Genre.Name</div>
        </div>
    </div><hr/>
    <div>
        <h3>Synopsis</h3>
        <div>
            @book.Synopsis
        </div>
    </div><hr />
    <EditForm Model="rating" OnValidSubmit="AddRating" FormName="ratingForm"> 
        <DataAnnotationsValidator/>
        <div>
            <label>Score 1-10</label>
            <InputNumber @bind-Value="rating.Value"></InputNumber>
        </div>
        <div>
            <button type="submit">Add rating</button>
        </div>
    </EditForm><hr />
    @foreach(RatingDto rating in ratings){
        <Rating rating="rating"></Rating>
    }
}
@code {
    [Parameter]
    public int Id{ get; set; }

    private BookDto book = null!;

    private List<RatingDto> ratings { get; set; } = new List<RatingDto>();

    private RatingRequestDto rating { get; set; } = new RatingRequestDto();

    protected async override Task OnInitializedAsync()
    {
        await Model.ReadBooksAsync();
        book = Model.Books.Where(b => b.Id == Id).First();

        await Model.ReadCurrentRatingsAsync(Id);
        ratings = Model.CurrentRatings;
    }

    private async Task AddRating(){
        if (Model.User is null) 
            return;
        rating.UserId = Model.User.Id;
        rating.BookId = book.Id;

        await Model.AddRatingAsync(rating);
        ratings = Model.CurrentRatings;
    }
}
