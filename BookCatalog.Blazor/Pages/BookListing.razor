@using BookCatalog.Blazor.Model;
@using BookCatalog.Shared.DTOs;
@using BookCatalog.Blazor.Components;

@page "/bookListing"
<PageTitle>Book Listing</PageTitle>

@inject BookCatalogModel Model;
@inject NavigationManager Navigation;

<h2>Books currently in catalog</h2><hr/><br/>

<div class="filterInput">
    Search by:
    <InputRadioGroup @bind-Value = "@FilterBy">
        <InputRadio Value="Filter.Title " /> <label>Title</label>
        <InputRadio Value="Filter.Author " /> <label>Author</label>
        <InputRadio Value="Filter.Genre " /> <label>Genre</label>
    </InputRadioGroup>
    <KeystrokeInputText @bind-Value="FilterText"></KeystrokeInputText>
</div><hr/><br/>

<table class = "table table-striped">
    <thead>
        <tr>
            <th @onclick=" () => OrderListBy(b => b.Name) ">Title</th>
            <th @onclick=" () => OrderListBy(b => b.Author.Name) ">Author</th>
            <th @onclick=" () => OrderListBy(b => b.Genre.Name) ">Genre</th>
            <th @onclick=" () => OrderListBy(b => b.PublishedAt) ">Published</th>
            <th>Score</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(BookDto book in BooksDisplayed)
        {
            <tr>
                <td @onclick="()=>GoToDetailedBook(book.Id)" >@book.Name</td>
                <td>@book.Author.Name</td>
                <td>@book.Genre.Name</td>
                <td>@book.PublishedAt.Year</td>
                <td>-/10</td>
                <td>
                    <button @onclick="()=>Delete(book.Id)" class="alert-danger">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<BookDto> BooksDisplayed { get; set; } = new List<BookDto>();

    private enum Filter{ Title, Author, Genre }

    private Filter filterBy = Filter.Title;
    private Filter FilterBy
    {
        get{ return filterBy;}
        set{
            filterBy = value;
            FilterStateChanged();
        }
    }

    private string filterText = "";
    private string FilterText
    {
        get{ return filterText; }
        set{
            filterText = value;
            FilterStateChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Model.ReadBooksAsync();
        //await Model.ReadListAsync("books", Model.Books);
        BooksDisplayed = Model.Books;
    }

    private void ClearFilters(){
        BooksDisplayed = Model.Books;
    }
    private void OrderListBy<T>(Func<BookDto,T> f){
        BooksDisplayed = Model.Books.OrderBy(f).ToList();
    }

    private void FilterStateChanged()
    {
        switch(filterBy){
            case Filter.Title : 
                {
                    BooksDisplayed = Model.Books
                        .Where(b => b.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
                }
            case Filter.Author:
                {
                    BooksDisplayed = Model.Books
                        .Where(b => b.Author.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
                }
            case Filter.Genre:
                {
                    BooksDisplayed = Model.Books
                        .Where(b => b.Genre.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
                }
        }
    }

    private void GoToDetailedBook(int id){
        Navigation.NavigateTo($"/book/{id}");
    }

    private async Task Delete(int Id){
        await Model.DeleteBookAsync(Id);
        BooksDisplayed = Model.Books;
    }
}
