@using BookCatalog.Shared.DTOs;
@using BookCatalog.Blazor.Model;

@page "/update"
<PageTitle>Update</PageTitle>

@inject BookCatalogModel Model;

<h3>Update</h3><hr/><br/>

@if (updateFailed)
{
    <div class="alert-danger">
        Updating entry failed, please try again
    </div><hr/><br/>
}

<div class="container">
    <EditForm Model="author" OnValidSubmit="UpdateAuthor" FormName="AuthorForm" class="row">
        <DataAnnotationsValidator />
        <div class=" col-2">
            <label>Author to update</label>
            <InputSelect @bind-Value="author.Name">
                @foreach (AuthorDto author in Model.Authors)
                {
                    <option>@author.Name</option>
                }
            </InputSelect>
        </div>
        <div class="col-4">
            <label>
                New name:
                <InputText @bind-Value="newAuthorName"></InputText>
                <ValidationMessage For="@(() => author.Name)" />
            </label>
        </div>
        <div class="col-2">
            <button type="submit">Update author</button>
        </div>
        @if (lastUpdatedType == Models.Author)
        {
            <div class="col alert-success">
                @lastUpdatedName was updated
            </div>
        }
    </EditForm>
</div>
<hr />
<br />


@code {
    private BookRequestDto book = new BookRequestDto() { PublishedAt = DateTime.Now };
    private string bookGenreName = string.Empty;
    private string bookAuthorName = string.Empty;

    private GenreDto genre = new GenreDto();
    private AuthorDto author = new AuthorDto();
    private string newAuthorName = string.Empty;
    private string newGenreName = string.Empty;

    private enum Models { Book, Author, Genre, None };

    private Models lastUpdatedType = Models.None;
    private string lastUpdatedName = "";
    private bool updateFailed = false;

    protected async override Task OnInitializedAsync()
    {
        await Model.ReadBooksAsync();
        await Model.ReadAuthorsAsync();
        await Model.ReadGenresAsync();

        author.Name = bookAuthorName = Model.Authors[0].Name;
        bookGenreName = Model.Genres[0].Name;
    }

    private async void UpdateAuthor()
    {
        try
        {
            int id = Model.Authors.Where(a => a.Name == author.Name).First().Id;
            author.Name = newAuthorName;
            await Model.UpdateAuthorAsync(id, author);
            updateFailed = false;
            lastUpdatedName = author.Name;
            lastUpdatedType = Models.Author;
        }
        catch
        {
            updateFailed = true;
            lastUpdatedType = Models.None;
        }
        StateHasChanged();
    }
}
